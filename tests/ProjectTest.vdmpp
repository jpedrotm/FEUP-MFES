class ProjectTest is subclass of Test
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
	public testCreateProject: () ==> ()
		testCreateProject() == 
		(
			dcl proj: Project := new Project("name", 5, {<ambassador> |-> 1, <speaker> |-> 4}, {<ambassador> |-> 1000, <speaker> |-> 500}, {<tech>}, 20);
			assert(proj.getName() = "name");
			assert(proj.getContracts() = {});
			assert(proj.getNumContracts() = 0);
			assert(proj.getMaxNumContracts() = 5);
			assert(proj.getDesiredNumPerRole() = {<ambassador> |-> 1, <speaker> |-> 4});
			assert(proj.getDesiredRoles() = {<ambassador>, <speaker>});
			assert(proj.getDesiredNumForRole(<ambassador>) = 1);
			assert(proj.getDesiredNumForRole(<speaker>) = 4);
			assert(proj.getTotalNumDesiredRoles() = 5);
			assert(proj.getBudgetPerRole() = {<ambassador> |-> 1000, <speaker> |-> 500});
			assert(proj.getMaxPriceForRole(<ambassador>) = 1000);
			assert(proj.getMaxPriceForRole(<speaker>) = 500);
			assert(proj.getBudgetedRoles() = {<ambassador>, <speaker>});
			assert(proj.getTotalNumBudgetedRoles() = 2);
			assert(proj.getDesiredCelebTypes() = {<tech>});
			assert(proj.getDuration() = 20);
			assert(proj.getDesiredNumForRole(<productPlacement>) = 0);
			assert(proj.getMaxPriceForRole(<productPlacement>) = 0);
		);
		
	public testSearchCelebs: () ==> ()
		testSearchCelebs() ==
		(		
			dcl proj: Project := new Project("name", 5, {<ambassador> |-> 1, <speaker> |-> 4}, {<ambassador> |-> 1000, <speaker> |-> 500}, {<tech>}, 20);
			dcl c1: Celebrity := new Celebrity("name", {<tech>}, 30, 10, {<speaker> |-> 1}, 5); -- Celebrity that fits all requirements
			dcl c2: Celebrity := new Celebrity("name", {<tech>}, 30, 10, {<productPlacement> |-> 1}, 5); -- Celebrity that only fits category requirement
			dcl c3: Celebrity := new Celebrity("name", {<sport>}, 30, 10, {<speaker> |->1}, 5); -- Celebrity that only fits role requirement
			dcl c4: Celebrity := new Celebrity("name", {<sport>}, 30, 10, {<productPlacement> |-> 1}, 5); -- Celebrity that doesn't fit requirements
			
			dcl celebs: set of Celebrity := {};
			assert(proj.getAppropriateCelebs(celebs) = {});
			
			celebs := {c1,c2,c3,c4};
			assert(proj.getAppropriateCelebs(celebs) = {c1});
		);
		
	public testProposeContract: () ==> ()
		testProposeContract() == 
		(
			dcl brand: Brand := new Brand("name");
			dcl proj: Project := new Project("name", 5, {<ambassador> |-> 1, <speaker> |-> 4}, {<ambassador> |-> 1000, <speaker> |-> 500}, {<tech>}, 20);
			-- dummy project to make contract to fill up c4's contracts
			dcl proj2: Project := new Project("name2", 5, {<ambassador> |-> 1, <speaker> |-> 4}, {<ambassador> |-> 1000, <speaker> |-> 500}, {<tech>}, 20);
			dcl c1: Celebrity := new Celebrity("name", {<tech>}, 30, 10, {<speaker> |-> 1}, 5); -- Celebrity that fits all requirements
			dcl c2: Celebrity := new Celebrity("name", {<tech>}, 10, 10, {<speaker> |-> 1}, 5); -- Celebrity that has smaller maximum period
			dcl c3: Celebrity := new Celebrity("name", {<tech>}, 30, 5000, {<speaker> |-> 1}, 5); -- Celebrity that has bigger minimum price
			dcl c4: Celebrity := new Celebrity("name", {<tech>}, 30, 10, {<speaker> |-> 1}, 1); -- Celebrity that already has contracts filled
			dcl cont1: Contract := new Contract(proj.getDuration(), brand, proj, c1, 1000, mk_Globals`Date(2016,1,1));
			dcl cont2: Contract := new Contract(proj.getDuration(), brand, proj, c2, 1000, mk_Globals`Date(2016,1,1));
			dcl cont3: Contract := new Contract(proj.getDuration(), brand, proj, c3, 1000, mk_Globals`Date(2016,1,1));
			dcl cont4: Contract := new Contract(proj.getDuration(), brand, proj, c4, 1000, mk_Globals`Date(2016,1,1));
			dcl cont5: Contract := new Contract(proj.getDuration(), brand, proj, c4, 1000, mk_Globals`Date(2016,1,1));			
			brand.addProject(proj);
			assert(proj.proposeContract(cont1, c1) = true);
			assert(proj2.proposeContract(cont5,c4) = true); -- fill up c4's contract slots
			assert(proj.proposeContract(cont2, c2) = false);
			--assert(proj.proposeContract(cont3, c3) = false);
			--assert(proj.proposeContract(cont4, c4) = false);
		);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end ProjectTest