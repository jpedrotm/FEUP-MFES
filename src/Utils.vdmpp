class Utils
types
	public String = seq of char;
	public Date :: year: nat1
								month: nat1
								day: nat1
								inv mk_Date(y,m,d) == m <= 12 and d <= DaysOfMonth(y,m);
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
	public static pure DaysOfMonth: nat1*nat1 ==> nat1 --funcao para verificar os dias de acordo com o mes
	 DaysOfMonth(year,month) == (
		if month = 1 or month = 3 or month = 5 or month = 7 or month = 8 or month = 10 or month = 12 then
			return 31
		else if month = 2 then
			if isLeapYear(year) then
				return 29
			else
				return 28
		else
			return 30;
	);
	
	public static calculateFinalDate: Date*nat1 ==> Date
		calculateFinalDate(date,duration) == (
			dcl d: nat := duration;
			dcl finalDate: Date := date;
			while (d > 0) do
			(
				if (d + finalDate.day) > DaysOfMonth(finalDate.year,finalDate.month) then
					(
						
						d := d - (DaysOfMonth(finalDate.year,finalDate.month)-finalDate.day)-1;
						finalDate.day := 1;
						if(finalDate.month = 12) then
							(
								finalDate.month := 1;
								finalDate.year := finalDate.year + 1;
							)
						else
							finalDate.month := finalDate.month + 1;
					)
				else
					(
						finalDate.day := finalDate.day + d;
						d := 0;
					)
			);
			
			return finalDate;
		);
functions
	private isLeapYear: nat1 -> bool
		isLeapYear(year) == (
			(year mod 4 = 0 and year mod 100 <> 0) or (year mod 400 = 4)
		);
		
	public compareDates: Date*Date -> bool
		compareDates(d1,d2) == (
			(d1.year < d2.year) or (d1.year = d2.year and d1.month < d2.month) or (d1.year = d2.year and d1.month = d2.month and d1.day <= d2.day)
		);
traces
-- TODO Define Combinatorial Test Traces here
end Utils