class Contract
types
	public contractRoles = <ambassador> | <speaker> | <entertainer> | <eventSponsor>
												| <digitalInfluence> | <productPlacement>;
	public Date :: year: nat1
								month: nat1
								day: nat1
								inv mk_Date(y,m,d) == m <= 12 and d <= Utils`DaysOfMonth(m); --fun��o para verificar os dias de acordo com o m�s
values
	-- TODO Define values here
instance variables
	private durationTime: nat1;
	private brand: Brand;
	private project: Project;
	private celebrity: [Celebrity] := nil;
	private totalPrice: nat1;
operations
	public Contract(durationT: nat1,b: Brand, p: Project,c: Celebrity,price: nat1) res: Contract == (
		durationTime := durationT;
		brand := b;
		project := p;
		celebrity := c;
		totalPrice := price;
	)
	post res.durationTime = durationTime and res.brand = brand and res.project = project and res.celebrity = celebrity and res.totalPrice = price;
	
	public getDurationTime: () ==> nat1
		getDurationTime() == return durationTime
		pre durationTime > 0
		post RESULT = durationTime;
		
	public getBrand: () ==> Brand
		getBrand() == return brand
		post RESULT = brand;
		
	public getProject: () ==> Project
		getProject() == return project
		post RESULT = project;
		
	public getCelebrity: () ==> [Celebrity]
		getCelebrity() == return celebrity
		post RESULT = celebrity;
		
	public getTotalPrice: () ==> nat1
		getTotalPrice() == return totalPrice
		post RESULT = totalPrice;
	
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Contract