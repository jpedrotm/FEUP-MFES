class Contract
types
	public contractRoles = <ambassador> | <speaker> | <entertainer> | <eventSponsor>
												| <digitalInfluence> | <productPlacement>;
												
values
	-- TODO Define values here
instance variables
	private durationTime: nat1;
	private startDate: Utils`Date;
	private finalDate: Utils`Date;
	private brand: Brand;
	private project: Project;
	private celebrity: [Celebrity] := nil;
	private totalPrice: nat1;
	--inv projectExistsInBrand(brand,project); Para descomentar depois
operations
	public Contract: nat1*Brand*Project*Celebrity*nat1*Utils`Date ==> Contract
			Contract(durationT,b,p,c,price,sDate) == (
			durationTime := durationT;
			brand := b;
			project := p;
			celebrity := c;
			totalPrice := price;
			startDate := sDate;
			finalDate := Utils`calculateFinalDate(startDate,durationTime);
			return self)
			post durationTime = durationT and brand = b and project = p and celebrity = c and totalPrice = price and startDate = sDate;
			
		public Contract: nat1 ==> Contract
			Contract(d) == (
				durationTime := d;
				startDate := mk_Utils`Date(2016,1,1);
				finalDate := Utils`calculateFinalDate(startDate,durationTime);
				return self;
			);
	
	public getDurationTime: () ==> nat1
		getDurationTime() == return durationTime
		pre durationTime > 0
		post RESULT = durationTime;
		
	public getBrand: () ==> Brand
		getBrand() == return brand
		post RESULT = brand;
		
	public getProject: () ==> Project
		getProject() == return project
		post RESULT = project;
		
	public getCelebrity: () ==> [Celebrity]
		getCelebrity() == return celebrity
		post RESULT = celebrity;
		
	public getTotalPrice: () ==> nat1
		getTotalPrice() == return totalPrice
		post RESULT = totalPrice;
		
	public pure getStartDate: () ==> Utils`Date
		getStartDate() == return startDate
		post RESULT = startDate;
		
	public pure getFinalDate: () ==> Utils`Date
		getFinalDate() == return finalDate
		post RESULT = finalDate;
functions
	projectExistsInBrand: Brand*Project -> bool
			projectExistsInBrand(brnd,proj) == (
				proj in set elems brnd.projects
			);
traces
-- TODO Define Combinatorial Test Traces here
end Contract