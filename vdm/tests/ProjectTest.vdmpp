class ProjectTest is subclass of Test
-- Class responsible for testing all that relates to the contract class

instance variables
	proj: Project := new Project("name", 5, {<ambassador> |-> 1, <speaker> |-> 4}, {<ambassador> |-> 1000, <speaker> |-> 500}, {<tech>}, 20, mk_Globals`Date(2016,1,10));
	brand: Brand := new Brand("name");
	c1: Celebrity := new Celebrity("name", {<tech>}, 10, 30, {<speaker>}, 5); -- Celebrity that fits all requirements
	c2: Celebrity := new Celebrity("name", {<tech>}, 10, 30, {<productPlacement>}, 5); -- Celebrity that only fits category requirement
	c3: Celebrity := new Celebrity("name", {<sport>}, 10, 30, {<speaker>}, 5); -- Celebrity that only fits role requirement
	c4: Celebrity := new Celebrity("name", {<sport>}, 10, 30, {<productPlacement>}, 5); -- Celebrity that doesn't fit requirements
	c5: Celebrity := new Celebrity("name", {<tech>}, 10, 10, {<speaker>}, 5); -- Celebrity that has smaller maximum period
	c6: Celebrity := new Celebrity("name", {<tech>}, 5000, 30, {<speaker>}, 5); -- Celebrity that has bigger minimum price
	c7: Celebrity := new Celebrity("name", {<tech>}, 10, 30, {<speaker>}, 1); -- Celebrity that already has contracts filled
	cont1: [Contract] := nil;
	cont2: [Contract] := nil;
	cont3: [Contract] := nil;
	cont4: [Contract] := nil;
	cont5: [Contract] := nil;
	
operations

	-- Use case scenarios
	--		Project manager / Brand owner adds a project to the brand (R05)
	public testCreateProject: () ==> ()
		testCreateProject() == 
		(
			dcl p: Project := new Project("name", 5, {<ambassador> |-> 1, <speaker> |-> 4}, {<ambassador> |-> 1000, <speaker> |-> 500}, {<tech>}, 20, mk_Globals`Date(2016,1,10));
			assert(p.getName() = "name");
			assert(p.getContracts() = {});
			assert(p.getNumContracts() = 0);
			assert(p.getMaxNumContracts() = 5);
			assert(p.getDesiredNumPerRole() = {<ambassador> |-> 1, <speaker> |-> 4});
			assert(p.getDesiredRoles() = {<ambassador>, <speaker>});
			assert(p.getDesiredNumForRole(<ambassador>) = 1);
			assert(p.getDesiredNumForRole(<speaker>) = 4);
			assert(p.getTotalNumDesiredRoles() = 5);
			assert(p.getBudgetPerRole() = {<ambassador> |-> 1000, <speaker> |-> 500});
			assert(p.getMaxPriceForRole(<ambassador>) = 1000);
			assert(p.getMaxPriceForRole(<speaker>) = 500);
			assert(p.getBudgetedRoles() = {<ambassador>, <speaker>});
			assert(p.getTotalNumBudgetedRoles() = 2);
			assert(p.getDesiredCelebTypes() = {<tech>});
			assert(p.getDuration() = 20);
			assert(p.getDesiredNumForRole(<productPlacement>) = 0);
		);
		
	-- Use case scenario
	--		Project Manager / Brand Owner want to make a contract, they search for celebrities that fit
	--			the project's type and role requirements (R07)
	public testSearchCelebs: () ==> ()
		testSearchCelebs() ==
		(		
			dcl celebs: set of Celebrity := {};
			assert(proj.getAppropriateCelebs(celebs) = {});
			
			celebs := {c1,c2,c3,c4};
			assert(proj.getAppropriateCelebs(celebs) = {c1});
		);
		
	-- Use case scenarios
	--		Project Manager/Brand owner propose a contract to a celebrity that fulfills their requirements 
	--		Celebrity accepts or rejects the contracts according to budget, duration and maximum amount of contracts constraints
	public testProposeContract: () ==> ()
		testProposeContract() == 
		(
			-- project to make contract to fill up c4's contracts
			dcl proj2: Project := new Project("name2", 5, {<ambassador> |-> 1, <speaker> |-> 4}, {<ambassador> |-> 1000, <speaker> |-> 500}, {<tech>}, 20, mk_Globals`Date(2016,1,10));

			brand.addProject(proj);
			brand.addProject(proj2);
			
			cont1 := new Contract(proj.getDuration(), brand, proj, c1, 1000, <speaker>);
			cont2 := new Contract(proj.getDuration(), brand, proj, c5, 1000, <speaker>);
			cont3 := new Contract(proj.getDuration(), brand, proj, c6, 1000, <speaker>);
			cont4 := new Contract(proj.getDuration(), brand, proj, c7, 1000, <speaker>);
			cont5 := new Contract(proj2.getDuration(), brand, proj2, c7, 1000,<speaker>);		

			assert(proj.proposeContract(cont1, c1) = true);
			assert(proj2.proposeContract(cont5,c7) = true); -- fill up c7's contract slots
			assert(proj.proposeContract(cont2, c5) = false); -- contract period too large
			assert(proj.proposeContract(cont3, c6) = false); -- contract payment too small
			assert(proj.proposeContract(cont4, c7) = false); -- maximum contracts reached
		);
		
	-- wrapper to execute all tests
	public testAll: () ==> ()
		testAll() == 
		(
			testCreateProject();
			testSearchCelebs();
			testProposeContract();
		);

	public main: () ==> ()
		main() == new ProjectTest().testAll();
end ProjectTest
