class BrandTest is subclass of Test
-- Class responsible for testing all that relates to the brand class
operations

	-- Use case scenarios:
	-- 		Brand owner wants to create a brand on the application	(RO1)
	-- 		Fills all the relevant information, and a brand should be created
	private testCreateBrand: () ==> ()
		testCreateBrand() == 
		(
			dcl brand: Brand := new Brand("name");
			assert(brand.getName() = "name");
			assert(brand.getProjects() = {});
			assert(brand.getNumProjects() = 0);
		);
		
	-- Use case scenarions:
	--		Brand owner/Project Manager wants to add projects to the brand (R05)
	--		Brand owner/Project Manager wants to remove projects from the brand (R06)
	private testAddAndRemoveProject: () ==> ()
		testAddAndRemoveProject() == 
		(
			dcl brand: Brand := new Brand("name");
			dcl proj: Project := new Project("projName", 1, {<ambassador> |-> 1}, {<ambassador> |-> 1000}, {<tech>}, 100, mk_Globals`Date(2016,1,10));
			dcl proj2: Project := new Project("projName", 1, {<ambassador> |-> 1}, {<ambassador> |-> 1000}, {<tech>}, 100, mk_Globals`Date(2019,1,10));
			
			-- Project Addition
			brand.addProject(proj);
			assert(brand.getProjects() = {proj});
			assert(brand.getNumProjects() = 1);
			
			brand.addProject(proj2);
			assert(brand.getProjects() = {proj, proj2});
			assert(brand.getNumProjects() = 2);
			
			-- Project removal
			brand.removeProject(proj);
			assert(brand.getProjects() = {proj2});
			assert(brand.getNumProjects() = 1);
			
			brand.removeProject(proj2);
			assert (brand.getProjects() = {});
			assert (brand.getNumProjects() = 0);
		);
		
	-- Wrapper to sequentially execute all the tests
	private testAll: () ==> ()
		testAll() == (
			testCreateBrand();
			testAddAndRemoveProject();
		);
		
	public static main: () ==> ()
		main() == (
			new BrandTest().testAll();
		);
end BrandTest