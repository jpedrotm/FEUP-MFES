class PlatformTest is subclass of Test
-- Class responsible for testing all that relates to the platform class

instance variables
	private duration: nat1 := 20;
	private totalPrice: nat1 := 120;
	private initialDate: Globals`Date := mk_Globals`Date(2016,1,10);
	private brand: Brand := new Brand("Adidas");
	private project1: Project := new Project("p1", 1, {<ambassador> |-> 1}, {<ambassador> |-> 1000}, {<tech>}, 100, mk_Globals`Date(2016,1,10));
	private project2: Project := new Project("p1", 1, {<ambassador> |-> 1}, {<ambassador> |-> 1000}, {<tech>}, 100, mk_Globals`Date(2017,1,10));
	private project3: Project := new Project("p1", 1, {<ambassador> |-> 1}, {<ambassador> |-> 1000}, {<tech>}, 100, mk_Globals`Date(2017,1,20));
	private celebrity: Celebrity := new Celebrity("Jose", {<sport>,<actor>}, 100, 30, {<ambassador>}, 2);
	private contract1: [Contract] := nil;
	private contract2: [Contract] := nil;
	private contract3: [Contract] := nil;
	private platform: Platform := new Platform(mk_Globals`Date(2000,1,1));
operations

	-- Use case scenarios
	-- 		Brand owner adds brand to the platform (R01)
	-- 		Brand owner removes brand from the platform (R03)
	--		Project Manager or Brand Owner adds project to the brand (R05)
	--		Project Manager or Brand Owner removes project from the brand (R06)
	--		Celebrity adds himself to the platform (R02)
	--		Celebrity removes himself from the platform (R04)
	--		Celebrity accepts contracts that satisfy theirs requirements (R08)
	-- 		Date of platform is updated to represent the passage of time (R09)
	private testAttributes: () ==> ()
		testAttributes() == (
			dcl stepDate: Globals`Date := Globals`calculateFinalDate(mk_Globals`Date(2015,1,1),731);
			
			platform := new Platform();
			
			platform.addBrand(brand);
			platform.addCelebrity(celebrity);
			
			assert(platform.getBrands() = {brand});
			assert(platform.getCelebs() = {celebrity});
			
			brand.addProject(project1);
			brand.addProject(project2);
			brand.addProject(project3);
			
			contract1 := new Contract(duration,brand,project1,celebrity,totalPrice,<ambassador>);
			celebrity.addContract(contract1);

			contract2 := new Contract(duration,brand,project2,celebrity,totalPrice,<ambassador>);
			celebrity.addContract(contract2);

			contract3 := new Contract(duration,brand,project3,celebrity,totalPrice,<ambassador>);
			celebrity.addContract(contract3);

			-- Update the date of the platform
			platform.step(stepDate);
			
			assert(celebrity.getContracts() = [contract2,contract3]);
			
			platform.removeBrand(brand);
			platform.removeCelebrity(celebrity);
			
			assert(platform.getBrands() = {});
			assert(platform.getCelebs() = {});
			
			platform.createBrand("Nike");
			platform.createCelebrity("Antonio", {<actor>}, 100, 30, {<entertainer>}, 4);
			
			platform.step();
			
			assert(platform.currentDate = mk_Globals`Date(2017,1,2));
		);
		
	-- wrapper to run all test
	private testAll: () ==> ()
		testAll() == (
			testAttributes();
		);
		
	public static main: () ==> ()
		main() == (
			new PlatformTest().testAll();
		);
end PlatformTest