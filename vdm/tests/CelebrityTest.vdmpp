class CelebrityTest is subclass of Test
-- Class responsible for testing all that relates to the celebrity class

instance variables
	private name: Globals`String := "Jose";
	private celebTypes: set of Celebrity`celebrityType := {<sport>,<actor>};
	private celebRoles: set of Contract`contractRoles := {<ambassador>};
	private minPrice: nat1 := 100;
	private maxTime: nat1 := 30;
	private maxContracts: nat1 := 2;
	private celebrity: Celebrity := new Celebrity(name,celebTypes,minPrice,maxTime,celebRoles,maxContracts);
	private brand: Brand := new Brand("Adidas");
	private project1: Project := new Project("p1", 10, {<ambassador> |-> 1}, {<ambassador> |-> 1000}, {<tech>}, 100, mk_Globals`Date(2016,1,1));
	private project2: Project := new Project("p2", 10, {<ambassador> |-> 1}, {<ambassador> |-> 1000}, {<tech>}, 100, mk_Globals`Date(2016,2,1));
	private contract1: [Contract] := nil;
	private contract2: [Contract] := nil;
	private contract3: [Contract] := nil;
	private contract4: [Contract] := nil;
operations

	-- Use case scenarios:
	--		Celebrity wants to have presence in the platform.
	--		Fills all the information and the object relating to them is created R02
	private testAttributes: () ==> ()
		testAttributes() == (
			assert(celebrity.getName() = name);
			assert(celebrity.getType() = celebTypes);
			assert(celebrity.getMinPrice() = minPrice);
			assert(celebrity.getMaxTime() = maxTime);
			assert(celebrity.getRoles() = celebRoles);
			assert(celebrity.getContracts() = []);
		);
		
	-- Use case scenarios:
	--		Celebrity accepts contracts that satisfy their requirements (role, budget and duration) 
	--			if they haven't yet reached the limit of active contracts
	--		Celebrity accepts contracts that satisfy their requirements, even if they have reached the limit of active contracts
	--			if the contract does not overlap the active ones
	--		Celebrity rejects contract if they have reached the limit of active contracts and the contract overlaps the others
	--		Fulfills R08
	
	private testAddRemoveContracts: () ==> ()
		testAddRemoveContracts() == (
				brand.addProject(project1);
				brand.addProject(project2);
				contract1 := new Contract(30,brand,project1,celebrity,120,<ambassador>);
				contract2 := new Contract(20,brand,project1,celebrity,120,<ambassador>);
				contract3 := new Contract(15,brand,project2,celebrity,120,<ambassador>);
				contract4 := new Contract(15,brand,project1,celebrity,120,<ambassador>);
		
				-- Adding contracts with active contracts < maximum contracts
				assert(celebrity.checkIfContractIsGood(contract1));
				celebrity.addContract(contract1);
				assert(celebrity.getContracts() = [contract1]);
				
				assert(celebrity.checkIfContractIsGood(contract2));
				celebrity.addContract(contract2);
				assert(celebrity.getContracts() = [contract2,contract1]);
				
				-- Adding contract with active contracts >= maximum contracts, but no overlap
				assert(celebrity.checkIfContractIsGood(contract3));
				celebrity.addContract(contract3);
				assert(celebrity.getContracts() = [contract2,contract1,contract3]);
				
				-- Adding an overlappign contract with active contracts >= maximum contracts
				assert(celebrity.checkIfContractIsGood(contract4) = false);
				
				-- Remove contract
				celebrity.removeContract(contract1);
				assert(celebrity.getContracts() = [contract2,contract3]);
		);
		
	-- Wrapper to sequentially execute all the tests
	private testAll: () ==> ()
		testAll() == (
			testAttributes();
			testAddRemoveContracts();
		);
		
	public static main: () ==> ()
		main() == (
			new CelebrityTest().testAll();
		);
end CelebrityTest