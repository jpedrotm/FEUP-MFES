class Platform
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	private brands: set of Brand;
	private celebs: set of Celebrity;
	public static currentDate: Globals`Date := mk_Globals`Date(2016,1,1);
operations
	public Platform: () ==> Platform
		Platform() == 
		(
			brands := {};
			celebs := {};
			return self;
		)
		post brands = {} and celebs = {};
		
	public Platform: Globals`Date ==> Platform
		Platform(d) == 
		(
			brands := {};
			celebs := {};
			currentDate := d;
			return self;
		)
		post brands = {} and celebs = {};
		
	public getBrands: () ==> set of Brand
		getBrands() == return brands;
		
	public getCelebs: () ==> set of Celebrity
		getCelebs() == return celebs;
		
	public addBrand: Brand ==> ()
		addBrand(brand) == 
		(
			brands := brands union {brand};
		)
		pre brand not in set brands
		post brands = brands~ union {brand};
		
	public createBrand: Globals`String ==> ()
		createBrand(name) == 	addBrand(new Brand(name))
		pre name <> ""
		post brands <> {};
	
	public addCelebrity: Celebrity ==> ()
		addCelebrity(celeb) ==
		(
			celebs := celebs union {celeb};
		)
		pre celeb not in set celebs
		post celeb in set celebs and celebs = celebs~ union {celeb};
		
	public createCelebrity: Globals`String*set of Celebrity`celebrityType*nat1*nat1*set of Contract`contractRoles*nat1 ==> ()
		createCelebrity(name,celebsTypes,minP,maxT,rs,maxC) == 	addCelebrity(new Celebrity(name,celebsTypes,minP,maxT,rs,maxC))
		pre name <> "" and celebsTypes <> {} and rs <> {}
		post celebs <> {};
		
	public removeBrand: Brand ==> ()
		removeBrand(brand) == 
		(
			brands := brands \ {brand};
		)
		pre brand in set brands
		post brands = brands~ \ {brand};
	
	public removeCelebrity: Celebrity ==> ()
		removeCelebrity(celeb) == 
		(
			celebs := celebs \ {celeb};
		)
		pre celeb in set celebs
		post celebs = celebs~ \ {celeb};
		
	public step: Globals`Date ==> ()
		step(d) == (
			currentDate := d;
			updatePlatform();
		)
		pre Globals`compareDates(currentDate,d)
		post currentDate = d;
		
	public step: () ==> ()
		step() == (
			currentDate := Globals`calculateFinalDate(currentDate,1);
			updatePlatform();
		)
		post Globals`compareDates(currentDate~,currentDate);
		
	public updatePlatform: () ==> ()
		updatePlatform() == (
			dcl stopCycle: bool := false;
			for all c in set celebs do( -- para cada celebridade vai verificar se a data final e inferior a atual, se for apaga o contrato
				dcl contracts: seq of Contract := c.getContracts();
				dcl i: int := 1;
				while(i <= len contracts and stopCycle <> true) do (
					dcl contract: Contract := contracts(i);
					if(Globals`compareDates(contract.getFinalDate(),currentDate)) then
						c.removeContract(contract)
					else
						stopCycle := true;
					i := i + 1;
				);
				stopCycle := false;
			);
		)
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Platform